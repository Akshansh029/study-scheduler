generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id           String   @id @default(cuid())
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    emailAddress String   @unique
    firstName    String?
    lastName     String?
    imageUrl     String?

    subjects   Subject[]      @relation("UserSubjects")
    sessions   StudySession[]
    flashcards Flashcard[]
    reviewLogs ReviewLog[]
}

model Subject {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    title     String
    color     String   @default("#4F46E5")

    user   User   @relation("UserSubjects", fields: [userId], references: [id])
    userId String

    flashcards Flashcard[]
    sessions   StudySession[]
}

model StudySession {
    id              String   @id @default(cuid())
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    title           String
    description     String?
    startTime       DateTime
    endTime         DateTime
    recurrence      String?  @default("none") // enum
    nextSessionDate DateTime
    status          String   @default("upcoming")

    user      User     @relation(fields: [userId], references: [id])
    userId    String
    subject   Subject? @relation(fields: [subjectId], references: [id])
    subjectId String?
}

model Flashcard {
    id              String   @id @default(cuid())
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    question        String
    answer          String
    repetitionCount Int      @default(0)
    easeFactor      Float    @default(2.5)
    interval        Int      @default(1)
    nextReviewDate  DateTime @default(now())

    subject    Subject     @relation(fields: [subjectId], references: [id])
    subjectId  String
    user       User        @relation(fields: [userId], references: [id])
    userId     String
    reviewLogs ReviewLog[]
}

model ReviewLog {
    id         String   @id @default(cuid())
    createdAt  DateTime @default(now())
    reviewDate DateTime @default(now())
    quality    Int // 0 to 5 rating

    flashcard   Flashcard @relation(fields: [flashcardId], references: [id])
    flashcardId String
    user        User      @relation(fields: [userId], references: [id])
    userId      String
}
