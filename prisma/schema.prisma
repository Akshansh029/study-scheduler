// // This is your Prisma schema file,

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// User accounts
model User {
    id           String   @id @default(cuid())
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    firstName    String?
    lastName     String?
    emailAddress String   @unique
    imageUrl     String?
    // preferences  Json?

    subjects Subject[] @relation("UserSubjects")
    // sessions      StudySession[]
    // reviews       ReviewLog[]
    // EmailReminder EmailReminder[]
}

// Subjects or topics a user studies
model Subject {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    title     String
    color     String   @default("#4F46E5") // default theme color
    user      User     @relation("UserSubjects", fields: [userId], references: [id])
    userId    String

    // flashcards Flashcard[]
    // sessions   StudySession[]
}

// Scheduled study sessions (time slots)
// model StudySession {
//     id         String   @id @default(cuid())
//     createdAt  DateTime @default(now())
//     updatedAt  DateTime @updatedAt
//     title      String
//     startTime  DateTime
//     endTime    DateTime
//     recurrence String? // e.g. "weekly", "daily", or CRON expression

//     user      User     @relation(fields: [userId], references: [id])
//     userId    String
//     subject   Subject? @relation(fields: [subjectId], references: [id])
//     subjectId String?
// }

// // Flashcards / active recall items
// model Flashcard {
//     id              String   @id @default(cuid())
//     createdAt       DateTime @default(now())
//     updatedAt       DateTime @updatedAt
//     question        String
//     answer          String
//     repetitionCount Int      @default(0)
//     easeFactor      Float    @default(2.5)
//     interval        Int      @default(1) // in days
//     nextReviewDate  DateTime @default(now())

//     subject   Subject     @relation(fields: [subjectId], references: [id])
//     subjectId String
//     reviews   ReviewLog[]
// }

// // Logs of each review event
// model ReviewLog {
//     id         String   @id @default(cuid())
//     createdAt  DateTime @default(now())
//     reviewDate DateTime @default(now())
//     quality    Int // 0-5 scale as per SM-2 algorithm

//     flashcard   Flashcard @relation(fields: [flashcardId], references: [id])
//     flashcardId String
//     user        User      @relation(fields: [userId], references: [id])
//     userId      String
// }

// // Optional: Add EmailReminder model for scheduling notifications
// model EmailReminder {
//     id          String   @id @default(cuid())
//     createdAt   DateTime @default(now())
//     scheduledAt DateTime
//     sent        Boolean  @default(false)
//     type        String // "session" or "review"
//     referenceId String // points to sessionId or flashcardId

//     user   User   @relation(fields: [userId], references: [id])
//     userId String
// }
